(self.webpackChunkjava_bot_docs=self.webpackChunkjava_bot_docs||[]).push([[1737],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return c}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(t),c=r,k=m["".concat(l,".").concat(c)]||m[c]||u[c]||i;return t?a.createElement(k,o(o({ref:n},p),{},{components:t})):a.createElement(k,o({ref:n},p))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7349:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var a=t(2122),r=t(9756),i=(t(7294),t(3905)),o=["components"],s={id:"q50",title:"Week 50"},l={unversionedId:"qotw/weeks/q50",id:"qotw/weeks/q50",isDocsHomePage:!1,title:"Week 50",description:"15.11.2021 - 28.11.2021",source:"@site/docs/qotw/weeks/q50.md",sourceDirName:"qotw/weeks",slug:"/qotw/weeks/q50",permalink:"/qotw/weeks/q50",version:"current",frontMatter:{id:"q50",title:"Week 50"},sidebar:"weeks",previous:{title:"Week 49",permalink:"/qotw/weeks/q49"},next:{title:"Week 51",permalink:"/qotw/weeks/q51"}},d=[],p={toc:d};function u(e){var n=e.components,s=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,s,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"15112021---28112021"},"15.11.2021 - 28.11.2021"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:t(6292).Z})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Submission by Jadefalke#3799"))),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayList")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedList")," are both implementations of the ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," interface but work fundamentally different."),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayList")," is backed by an Array which grows in size (in a special way, doubling it's size)."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedList")," is backed using Nodes with a ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Node")," reference for each node."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Submission by dan1st#7327"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ArrayList")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedList")," are two classes implementing the ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," representing a list data structure that allows indexed access and adding/removing elements.\nAs the name suggests, ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayList")," is based on arrays. An ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayList")," instance contains an underlaying array of its elements. When adding an element to the list, it is added to the array. If that would exceed the array size, a new but bigger array is created.\nOn the other hand, ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedList")," represents a doubly linked list data structure. It contains a reference to the first and last node. Each node contains a reference to the referenced element, the previous and next node. This allows iterating, inserting and removing elements/nodes. Aside from ",(0,i.kt)("inlineCode",{parentName:"p"},"List"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedList")," also implements the interfaces ",(0,i.kt)("inlineCode",{parentName:"p"},"Queue")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Dequeue"),".\nWhile ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayList")," has better read more performant than ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedList")," and is faster when setting elements at arbitiary indexes or removing and adding (as long as the underlaying array's size is not exceeded) elements at the end, ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedList")," is better when adding/removing elements at the begginning as the underlaying array of ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayList")," would need to be shifted."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Submission by Loading BG#7962"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"LinkedList")," is a linked list\n",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayList")," is an array which gets resized on demand"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Submission by Maeve#6666"))),(0,i.kt)("p",null,"They are both part of the collections framework and implement ",(0,i.kt)("inlineCode",{parentName:"p"},"List<T>"),".\nAn ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayList")," surprisingly works somewhat like a resizable array (hence the name) and a ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedList")," uses nodes or something. It also implements ",(0,i.kt)("inlineCode",{parentName:"p"},"Queue")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Dequeue"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Submission by Gaming32#6509"))),(0,i.kt)("p",null,"ArrayLists use an array, while LinkedLists are literally linked lists. Both have advantages and disadvantages for different purposes. ArrayLists are useful for variable-length arrays, while LinkedLists are useful for queues and deques. "),(0,i.kt)("p",null,"ArrayList:\nRemoval/add from/to left end: O(n)\nRemoval/add from/to right end: O(1)\nRandom access: O(1)"),(0,i.kt)("p",null,"LinkedList:\nRemoval/add from/to left end: O(1)\nRemoval/add from/to right end: O(1)\nRandom access: O(n)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Submission by WOSAJ#4582"))),(0,i.kt)("p",null,"The ArrayList and LinkedList classes differ in that the first one contains an array inside, and basically the idea is to work with an array, in the second case there is no array, and the data is interconnected using links to the previous and next list item (a kind of chain of links)"))}u.isMDXComponent=!0},6292:function(e,n,t){"use strict";n.Z=t.p+"assets/images/QOTW50-c3ea8627269010d29dbe363734f27f99.png"}}]);