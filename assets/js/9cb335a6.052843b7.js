(self.webpackChunkjava_bot_docs=self.webpackChunkjava_bot_docs||[]).push([[3603],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),f=s,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||r;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},449:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var a=n(2122),s=n(9756),r=(n(7294),n(3905)),o=["components"],i={id:"q34",title:"Week 34"},l={unversionedId:"qotw/weeks/q34",id:"qotw/weeks/q34",isDocsHomePage:!1,title:"Week 34",description:"27.06.2021 - 04.07.2021",source:"@site/docs/qotw/weeks/q34.md",sourceDirName:"qotw/weeks",slug:"/qotw/weeks/q34",permalink:"/qotw/weeks/q34",version:"current",frontMatter:{id:"q34",title:"Week 34"},sidebar:"weeks",previous:{title:"Week 33",permalink:"/qotw/weeks/q33"},next:{title:"Week 35",permalink:"/qotw/weeks/q35"}},c=[],u={toc:c};function p(e){var t=e.components,i=(0,s.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"27062021---04072021"},"27.06.2021 - 04.07.2021"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:n(972).Z})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Submission by soup#0553"))),(0,r.kt)("p",null,"A nested class is a class that is defined within another class. Nested classes are useful for emphasizing that a class is conceptually a subset of another. Like regular classes, nested classes can be declared using the ",(0,r.kt)("inlineCode",{parentName:"p"},"static")," keyword to allow for calling in the case that no instance of its outer (encapsulating) class has been declared. Non-static nested classes are also referred to as inner classes. Make note not to confuse such classes with subclasses. Whereas subclasses inherit ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"protected")," fields (variables) and methods (functions) from their superclass, nested classes simply serve as a class encapsulated within another."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Submission by AttilaTheHun - Slightly Retired#9489"))),(0,r.kt)("p",null,"Nested class is a class declared inside of another class. It is usually used to implement some additional functionality to the main class, for example the class ",(0,r.kt)("inlineCode",{parentName:"p"},"ArrayList")," contains another class called ",(0,r.kt)("inlineCode",{parentName:"p"},"ListItr")," implementing ",(0,r.kt)("inlineCode",{parentName:"p"},"ListIterator<E>")," that is being used as an Iterator for the list. Another example is the class ",(0,r.kt)("inlineCode",{parentName:"p"},"LinearLayout")," from the Android Open Source Project that contains another class ",(0,r.kt)("inlineCode",{parentName:"p"},"LayoutParams")," that hods information about its gravity and stuff."),(0,r.kt)("p",null,"Basically if you need more classes within one ",(0,r.kt)("inlineCode",{parentName:"p"},".java")," file, you put them altogether so people on GitHub viewing your code can face-palm while reading the mess."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Submission by dan1st#7327"))),(0,r.kt)("p",null,"Nested classes are classes inside other classes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Outside{\n    //Stuff of outer class\n    public static class Inside{\n        //Stuff of nested class\n    }\n}\n")),(0,r.kt)("p",null,"When compiling, nested classes are compiled into seperate ",(0,r.kt)("inlineCode",{parentName:"p"},".class")," files typically in the format ",(0,r.kt)("inlineCode",{parentName:"p"},"Outer$Nested.class"),". Nested classes can access (static) private attributes/methods of the outer class using generated getters/setters just for the nested class A special type of a nested is an inner class. Inner classes are not marked ",(0,r.kt)("inlineCode",{parentName:"p"},"static")," and are bound to an instance of the outer class. Other types of nested classes are anonymous classes (classes without a name), lambdas (abbreviation of anonymous classes) and local classes (those exist in a method and can access both fields of the outer class and (effectively) final local variables of the outside method)."))}p.isMDXComponent=!0},972:function(e,t,n){"use strict";t.Z=n.p+"assets/images/QOTW34-629a1efce1ff644d8430e7d26891bc19.png"}}]);