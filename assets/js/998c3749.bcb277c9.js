(self.webpackChunkjava_bot_docs=self.webpackChunkjava_bot_docs||[]).push([[597],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),k=s(n),m=a,d=k["".concat(l,".").concat(m)]||k[m]||u[m]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=k;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},9596:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],c={id:"q42",title:"Week 42"},l={unversionedId:"qotw/weeks/q42",id:"qotw/weeks/q42",isDocsHomePage:!1,title:"Week 42",description:"05.09.2021 - 12.09.2021",source:"@site/docs/qotw/weeks/q42.md",sourceDirName:"qotw/weeks",slug:"/qotw/weeks/q42",permalink:"/qotw/weeks/q42",version:"current",frontMatter:{id:"q42",title:"Week 42"},sidebar:"weeks",previous:{title:"Week 41",permalink:"/qotw/weeks/q41"},next:{title:"Week 43",permalink:"/qotw/weeks/q43"}},s=[],p={toc:s};function u(e){var t=e.components,c=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,c,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"05092021---12092021"},"05.09.2021 - 12.09.2021"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(9274).Z})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by dan1st#7327"))),(0,o.kt)("p",null,"While ",(0,o.kt)("inlineCode",{parentName:"p"},"Socket"),"s work with (Input-/Output-)Streams, ",(0,o.kt)("inlineCode",{parentName:"p"},"SocketChannel")," is part of the Java NIO API and also allows for nonblocking access."),(0,o.kt)("p",null,"In order to read/write from/to sockets, the following code can be used:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'try(\n    //Connect/create the socket\n    Socket sock=new Socket("127.0.0.1",1337);\n    //Get streams\n    OutputStream os=sock.getOutputStream();\n    InputStream is=sock.getInputStream()\n){\n    //Code with streams here\n}\n')),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"SocketChannel")," can be created like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'SocketChannel socketChannel = SocketChannel.open();\nsocketChannel.connect(new InetSocketAddress("127.0.0.1", 1337));\n')),(0,o.kt)("p",null,"After this, data can be read from/written to it using its ",(0,o.kt)("inlineCode",{parentName:"p"},"read"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"write")," methods tjat each take a ",(0,o.kt)("inlineCode",{parentName:"p"},"ByteBuffer")," as a parameter containing the actual data and return an ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," with the number of bytes read/written."),(0,o.kt)("p",null,"As ",(0,o.kt)("inlineCode",{parentName:"p"},"SocketChannel"),"s can also be used in a nonblocking way (calling ",(0,o.kt)("inlineCode",{parentName:"p"},"configureBlocking(false);")," before ",(0,o.kt)("inlineCode",{parentName:"p"},"connect(...)"),"), the ",(0,o.kt)("inlineCode",{parentName:"p"},"read"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"write")," methods may not read/write anything if that would not be possible without blocking."))}u.isMDXComponent=!0},9274:function(e,t,n){"use strict";t.Z=n.p+"assets/images/QOTW42-ba88d31fb62377c76c2887ce6b320a00.png"}}]);