(self.webpackChunkjava_bot_docs=self.webpackChunkjava_bot_docs||[]).push([[1161],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9942:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],s={id:"q49",title:"Week 49"},l={unversionedId:"qotw/weeks/q49",id:"qotw/weeks/q49",isDocsHomePage:!1,title:"Week 49",description:"31.10.2021 - 14.11.2021",source:"@site/docs/qotw/weeks/q49.md",sourceDirName:"qotw/weeks",slug:"/qotw/weeks/q49",permalink:"/qotw/weeks/q49",version:"current",frontMatter:{id:"q49",title:"Week 49"},sidebar:"weeks",previous:{title:"Week 48",permalink:"/qotw/weeks/q48"},next:{title:"Week 50",permalink:"/qotw/weeks/q50"}},c=[],u={toc:c};function d(e){var t=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"31102021---14112021"},"31.10.2021 - 14.11.2021"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(7318).Z})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Submission by dan1st#7327"))),(0,i.kt)("p",null,"The quicksort algorithm can be implemented like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class Sort {\n        public static void quickSort(int[] data) {\n                quickSort(data, 0, data.length);\n        }\n\n        private static void quickSort(int[] data, int start, int len) {\n                if (len <= 2) {\n                        if (len == 2 && data[start] > data[start + 1]) {\n                                swap(data, start, start + 1);\n                        }\n                        return;\n                }\n\n                int first = data[start];\n                int last = data[start + len - 1];\n                int middle = data[(start * 2 + len - 1) / 2];\n\n                int border = medianOf3(first, middle, last);\n\n                int begin = start;\n                int end = start + len - 1;\n                while (end > begin) {\n                        while (data[begin] <= border && end > begin) {\n                                begin++;\n                        }\n                        while (data[end] > border && end > begin) {\n                                end--;\n                        }\n                        if (end > begin) {\n                                swap(data, begin, end);\n                        }\n                }\n                quickSort(data, start, end - start);\n                quickSort(data, end, start + len - end);\n        }\n\n        private static void swap(int[] data, int indexA, int indexB) {\n                int tmp = data[indexA];\n                data[indexA] = data[indexB];\n                data[indexB] = tmp;\n        }\n\n        private static int medianOf3(int a, int b, int c) {\n                if (a > b) {\n                        if (b > c) {\n                                return b;\n                        }\n                        if (a > c) {\n                                return c;\n                        }\n                        return a;\n                }\n                if (a > c) {\n                        return a;\n                }\n                if (b > c) {\n                        return c;\n                }\n                return b;\n        }\n}\n")),(0,i.kt)("p",null,"At first, it checks if two or less items need to be sorted. In that case, it swaps the elements if necessary and returns (sorting of those elements finished).\nAfter that, it picks three elements from the array (could be any elements) and calculates the median value in the middle) of these (result is called border) . After this is done, it moves all elements smaller than the calculated value to the left and all higher elements to the right. This is done by skipping all correct values and swapping once wrong values are found.\nAfter that, it calls itself recursively two times for sorting the left (lower values) and the right (higher values) pafts respectively."))}d.isMDXComponent=!0},7318:function(e,t,n){"use strict";t.Z=n.p+"assets/images/QOTW49-5d3e5e0c5000d59c85a93a6477994d4b.png"}}]);