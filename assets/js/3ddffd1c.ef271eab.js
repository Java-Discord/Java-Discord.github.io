(self.webpackChunkjava_bot_docs=self.webpackChunkjava_bot_docs||[]).push([[549],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=l(n),m=a,k=f["".concat(s,".").concat(m)]||f[m]||p[m]||o;return n?r.createElement(k,i(i({ref:t},u),{},{components:n})):r.createElement(k,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8802:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return s},toc:function(){return l},default:function(){return p}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],c={id:"q33",title:"Week 33"},s={unversionedId:"qotw/weeks/q33",id:"qotw/weeks/q33",isDocsHomePage:!1,title:"Week 33",description:"13.06.2021 - 20.06.2021",source:"@site/docs/qotw/weeks/q33.md",sourceDirName:"qotw/weeks",slug:"/qotw/weeks/q33",permalink:"/qotw/weeks/q33",version:"current",frontMatter:{id:"q33",title:"Week 33"},sidebar:"weeks",previous:{title:"Week 32",permalink:"/qotw/weeks/q32"},next:{title:"Week 34",permalink:"/qotw/weeks/q34"}},l=[],u={toc:l};function p(e){var t=e.components,c=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,c,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"13062021---20062021"},"13.06.2021 - 20.06.2021"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(7695).Z})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by dan1st#7327"))),(0,o.kt)("p",null,"A marker interface is an interface without any methods. An example of a marker interface is ",(0,o.kt)("inlineCode",{parentName:"p"},"java.util.EventListener"),". The purpose of a marker interface is not to force any restriction (enforced by the compiler itself) on the types but to mark the type as being some special kind of type (e.g. a listener). Annotations mostly replace marker interfaces (except if annotations did not exist when the marker interface was created)."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by b lohnung#1337"))),(0,o.kt)("p",null,"A Marker Interface is an Interface without any methods, its only purpose is to mark another class. An Example is a Marker interface called Shape for the Classes Circle, or Square"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by Tahomuk#0128"))),(0,o.kt)("p",null,"A marker interface is an artificial usage of interface to indicate certain semantics beyond method signatures. When Annotations came along Marker Interfaces became mostly obsolete."))}p.isMDXComponent=!0},7695:function(e,t,n){"use strict";t.Z=n.p+"assets/images/QOTW33-03a82345eda76d7be0644dd88dbb4172.png"}}]);