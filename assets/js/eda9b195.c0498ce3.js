(self.webpackChunkjava_bot_docs=self.webpackChunkjava_bot_docs||[]).push([[503],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(h,a(a({ref:t},s),{},{components:n})):r.createElement(h,a({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4713:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a=["components"],l={id:"q30",title:"Week 30"},c={unversionedId:"qotw/weeks/q30",id:"qotw/weeks/q30",isDocsHomePage:!1,title:"Week 30",description:"23.05.2021 - 30.05.2021",source:"@site/docs/qotw/weeks/q30.md",sourceDirName:"qotw/weeks",slug:"/qotw/weeks/q30",permalink:"/qotw/weeks/q30",version:"current",frontMatter:{id:"q30",title:"Week 30"},sidebar:"tutorialSidebar",previous:{title:"Week 29",permalink:"/qotw/weeks/q29"},next:{title:"Week 31",permalink:"/qotw/weeks/q31"}},p=[],s={toc:p};function m(e){var t=e.components,l=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},s,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"23052021---30052021"},"23.05.2021 - 30.05.2021"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(4134).Z})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Submission by dan1st#7327"))),(0,i.kt)("p",null,"Polymorphism is the concept of calling something where it is (yet) undecided what exactly is called.\ncompile-time-polymorphism when the decision is done at compile-time. In Java, this happens when using an overloading like ",(0,i.kt)("inlineCode",{parentName:"p"},"System.out.println"),". If you run ",(0,i.kt)("inlineCode",{parentName:"p"},'System.out.println("Hello World");'),", it will call the ",(0,i.kt)("inlineCode",{parentName:"p"},"PrintStream#println")," method that takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," argument. However, when running ",(0,i.kt)("inlineCode",{parentName:"p"},"System.out.println(1337);"),", another method is executed, the ",(0,i.kt)("inlineCode",{parentName:"p"},"println")," method that takes an ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," parameter. As the compiler decides what method to call, it is a form of compile-time polymorphism.\nRuntime-polymorphism is when this decision is done at runtime. In Java, this happens when using an overridden method. For example, your class could override ",(0,i.kt)("inlineCode",{parentName:"p"},"Object#toString"),". When you then create an instance of your class and assign it to an ",(0,i.kt)("inlineCode",{parentName:"p"},"Object")," variable and then call its ",(0,i.kt)("inlineCode",{parentName:"p"},"toString")," method, the compiler doesn't know what method should be called. At runtime, the JVM looks at the object and sees that the ",(0,i.kt)("inlineCode",{parentName:"p"},"toString")," method is overridden and it will actually call your ",(0,i.kt)("inlineCode",{parentName:"p"},"toString")," method. As this is done at runtime (at least when talking about java), it is an instance of runtime polymorphism."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Submission by kplusp#6735"))),(0,i.kt)("p",null,"Compile time polymorphism checks at the compole time which method to call while at runtime it check during execution the method to be called.Compile time is method overloading.Runtime polymorphism is method over riding"))}m.isMDXComponent=!0},4134:function(e,t,n){"use strict";t.Z=n.p+"assets/images/QOTW30-549eedcd8f13c8c89f763ef06acf375c.png"}}]);