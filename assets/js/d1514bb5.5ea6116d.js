(self.webpackChunkjava_bot_docs=self.webpackChunkjava_bot_docs||[]).push([[9002],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return m},kt:function(){return f}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),u=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=u(r),f=n,d=p["".concat(l,".").concat(f)]||p[f]||c[f]||o;return r?a.createElement(d,i(i({ref:t},m),{},{components:r})):a.createElement(d,i({ref:t},m))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},4389:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return c}});var a=r(2122),n=r(9756),o=(r(7294),r(3905)),i=["components"],s={id:"winter-java-jam",title:"Winter Java Jam"},l={unversionedId:"java-jam/jams/winter-java-jam",id:"java-jam/jams/winter-java-jam",isDocsHomePage:!1,title:"Winter Java Jam",description:"27.11.2021 - ???",source:"@site/docs/java-jam/jams/winter-java-jam.md",sourceDirName:"java-jam/jams",slug:"/java-jam/jams/winter-java-jam",permalink:"/java-jam/jams/winter-java-jam",version:"current",frontMatter:{id:"winter-java-jam",title:"Winter Java Jam"},sidebar:"jams",previous:{title:"Spooktober Java Jam",permalink:"/java-jam/jams/spooktober-java-jam"}},u=[{value:"Themes",id:"themes",children:[]},{value:"Submissions",id:"submissions",children:[]}],m={toc:u};function c(e){var t=e.components,s=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"27112021---"},"27.11.2021 - ???"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:r(4788).Z})),(0,o.kt)("h2",{id:"themes"},"Themes"),(0,o.kt)("p",null,"For the ",(0,o.kt)("em",{parentName:"p"},"Winter Java Jam"),", you can make a submission for either of these themes (but not both; choose one):"),(0,o.kt)("h4",{id:"1\ufe0f\u20e3-algorithm-visualization"},"1\ufe0f\u20e3 Algorithm Visualization"),(0,o.kt)("p",null,"Create a program that can visualize the operations of one or more algorithms on a dataset in real-time, such as various sorting methods, pathfinding, hill-climbing, recursive traversal, etc. The program should allow users to provide their own data to the visualization."),(0,o.kt)("h4",{id:"2\ufe0f\u20e3-world-generation"},"2\ufe0f\u20e3 World Generation"),(0,o.kt)("p",null,"Create a simple video game that has some form of infinite, procedurally generated world that the player can explore in. This could be top-down (like zelda, fire emblem, etc.) side-on (like terraria), or even isometric or 3-dimensional if you think you can manage it. Your game's world should be infinite in size (or so large that manually generating the world would be impossible), and you should be able to move around through the world as a player."),(0,o.kt)("h2",{id:"submissions"},"Submissions"))}c.isMDXComponent=!0},4788:function(e,t,r){"use strict";t.Z=r.p+"assets/images/WinterJavaJam-455f6df7951145a106b19b74caa9f7fb.png"}}]);