(self.webpackChunkjava_bot_docs=self.webpackChunkjava_bot_docs||[]).push([[6269],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9623:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],s={id:"q51",title:"Week 51"},l={unversionedId:"qotw/weeks/q51",id:"qotw/weeks/q51",isDocsHomePage:!1,title:"Week 51",description:"28.11.2021 - 05.12.2021",source:"@site/docs/qotw/weeks/q51.md",sourceDirName:"qotw/weeks",slug:"/qotw/weeks/q51",permalink:"/qotw/weeks/q51",version:"current",frontMatter:{id:"q51",title:"Week 51"},sidebar:"weeks",previous:{title:"Week 50",permalink:"/qotw/weeks/q50"},next:{title:"Week 52",permalink:"/qotw/weeks/q52"}},p=[],c={toc:p};function u(e){var t=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"28112021---05122021"},"28.11.2021 - 05.12.2021"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(6932).Z})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Submission by dan1st#7327"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Set"),"s can contain an arbitiary number of elements without duplicates. ",(0,i.kt)("inlineCode",{parentName:"p"},"Set"),"s don't have a specified order.\n",(0,i.kt)("inlineCode",{parentName:"p"},"HashSet")," is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Set")," that works by distributing elements by their (truncated) hash. While this (normally) results in performant set operations, the order of the elements is seemingly random (derived from truncated hashes).\nSimilarily, there is ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedHashSet"),". Tgis is a ",(0,i.kt)("inlineCode",{parentName:"p"},"HashSet")," that additionally contains a linked list with its elements. Every time an element is added to a ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedHashSet"),", it is added to the underlying linked list's tail (and the elements are removed from the linked list when removing them from the ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedHashSet"),"). This keeps the insertion order while also fulfilling the specifications of ",(0,i.kt)("inlineCode",{parentName:"p"},"Set"),".\nOn the other hand, ",(0,i.kt)("inlineCode",{parentName:"p"},"TreeSet")," is another set based on a sorted and binary tree that is balanced when changing its elements. This often results in slower set operations but ",(0,i.kt)("inlineCode",{parentName:"p"},"TreeSet"),"s are sorted in the natural (or a custom) order of the elements."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Submission by \u30eb\u30a4\u062a#0932"))),(0,i.kt)("p",null,"HashSet is an accurate insertion of the Set interface while Tree-Set inputs a sorted state. TreeSet is supported by TreeMap, same applies for hashmap but instead hashset and hashmap. The amount of Tree cant be a object relevant to zero."))}u.isMDXComponent=!0},6932:function(e,t,n){"use strict";t.Z=n.p+"assets/images/QOTW51-fba19a636b4d0edbfdef6594757bfd72.png"}}]);