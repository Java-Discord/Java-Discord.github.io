(self.webpackChunkjava_bot_docs=self.webpackChunkjava_bot_docs||[]).push([[2889],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(t),f=a,y=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(y,i(i({ref:n},p),{},{components:t})):r.createElement(y,i({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3620:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=["components"],c={id:"q48",title:"Week 48"},s={unversionedId:"qotw/weeks/q48",id:"qotw/weeks/q48",isDocsHomePage:!1,title:"Week 48",description:"24.10.2021 - 31.10.2021",source:"@site/docs/qotw/weeks/q48.md",sourceDirName:"qotw/weeks",slug:"/qotw/weeks/q48",permalink:"/qotw/weeks/q48",version:"current",frontMatter:{id:"q48",title:"Week 48"},sidebar:"weeks",previous:{title:"Week 47",permalink:"/qotw/weeks/q47"},next:{title:"Week 49",permalink:"/qotw/weeks/q49"}},l=[],p={toc:l};function u(e){var n=e.components,c=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,c,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"24102021---31102021"},"24.10.2021 - 31.10.2021"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:t(7813).Z})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by Krish.#9072"))),(0,o.kt)("p",null,"Well, constructor injection and setter injection are basically two most important stuffs for Dependency injection and inversion of code which is followed by several big Frameworks as in Spring."),(0,o.kt)("p",null,"Coming to the answer, it's always suitable to use setter injection when you dont want to create a new bean instance with that constructor and add the dependency there. Moreover, setter injection provides flexibility   by letting us to change the dependency of the code whenever needed. It helps in case of partial dependencies too."),(0,o.kt)("p",null,"This concept of setter injection comes handy in spring Framework and inversion of control."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by dan1st#7327"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Dependency injection")," is the process of supplying necessary dependencies to a class instance.\nWhen using ",(0,o.kt)("strong",{parentName:"p"},"Constructor injection"),", this is done when the instance is created using constructor arguments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class DependentService{\n    private DependencyType dependency;\n    public DependentSevice(DependencyType dependency) {\n        this.dependency=dependency;\n    } \n} \n")),(0,o.kt)("p",null,"The instance manager creates the instance using the constructor and all required dependencies.\nOn the other hand, ",(0,o.kt)("strong",{parentName:"p"},"Setter injection")," is done by instantiating the class without the dependencies (usually using a no-args-constructor) and calling the setters of the class for injecting the dependencies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class DependentService{\n    private DependencyType dependency;\n    public void setDependency(DependencyType dependency) {\n        this.dependency=dependency;\n    } \n} \n")),(0,o.kt)("p",null,"The instance manager creates the object using it's default/no-args constructor and calls the setter with the dependency as an argument afterwards."),(0,o.kt)("p",null,"The advantage of constructor injection is that the developer can be sure that all required dependencies are supplied whenever an instance of a certain class is created. However, constructor injection may not be (easily) possibly with certain frameworks that require a no-args constructor (e.g. JUnit for test classes)."))}u.isMDXComponent=!0},7813:function(e,n,t){"use strict";n.Z=t.p+"assets/images/QOTW48-96816a050664582e46b5ecb5a2866a24.png"}}]);