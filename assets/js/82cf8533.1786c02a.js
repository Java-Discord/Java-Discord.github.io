(self.webpackChunkjava_bot_docs=self.webpackChunkjava_bot_docs||[]).push([[2681],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1416:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),s=["components"],i={id:"q45",title:"Week 45"},l={unversionedId:"qotw/weeks/q45",id:"qotw/weeks/q45",isDocsHomePage:!1,title:"Week 45",description:"26.09.2021 - 03.10.2021",source:"@site/docs/qotw/weeks/q45.md",sourceDirName:"qotw/weeks",slug:"/qotw/weeks/q45",permalink:"/qotw/weeks/q45",version:"current",frontMatter:{id:"q45",title:"Week 45"},sidebar:"weeks",previous:{title:"Week 44",permalink:"/qotw/weeks/q44"},next:{title:"Week 46",permalink:"/qotw/weeks/q46"}},c=[],u={toc:c};function p(e){var t=e.components,i=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"26092021---03102021"},"26.09.2021 - 03.10.2021"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(7535).Z})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by primevibetime"))),(0,o.kt)("p",null,"a constructor, is an initializer for an object. Overloading that, means you create a constructor, and then make another, the same way, but with different paramaters, so the JVM can read them as different"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by dan1st#7327"))),(0,o.kt)("p",null,"A constructor is called when an object of a certain class is instantiated. Such a constructor can have an arbituary number of parameters and all of these parameters need to be present when instantiating the object. However, it is possible to create multiple constructors with different parameters and the compiler will choose the correct constructor for each object instantiation depending on the argument types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class SomeClass{\n    private final String s;\n    public SomeClass(){\n        s="";\n    }\n    public SomeClass(String someString){\n        s=someString;\n    }\n    public SomeClass(int someInt){\n        s=""+someInt;\n    }\n}\n')),(0,o.kt)("p",null,"Instances of this class could be created like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'SomeClass empty=new SomeClass();\nSomeClass str=new SomeClass("Hello World");\nSomeclass num=new SomeClass(1337);\n')),(0,o.kt)("p",null,"Howevery the following is not allowed as no fitting constructor is available:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"SomeClass doesNotWork=new SomeClass(13.37);//no constructor with 'double' parameter\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by Jadefalke#3799"))),(0,o.kt)("p",null,"Constructor overloading refers to having multiple constructors for the same class, that have different parameter-lists.\nWhat this allows you to do, is to have a base constructor with all possible parameters and overload that constructor with other constructors that have less parameters. If you then call the base-constructor with ",(0,o.kt)("inlineCode",{parentName:"p"},"this")," you can essentially create optional parameters.\nAn example would be"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public SomeClass (int a, String b, List<Integer> c) {\n  this.a = a;\n  this.b = b;\n  //...\n}\n\npublic SomeClass (int a, List<Integer> c) {\n  this(a, "default String :)", c)\n}\n\netc ...\n')),(0,o.kt)("p",null,"This is used almost everywhere in the java API. Having multiple constructors to choose from is a huge advantage and allows you to code much more efficiently and faster!!"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by I-S3-O#9926"))),(0,o.kt)("p",null,"Constructor overloading is creating extended versions of the the default constructor by adding more parameters to the parameter list. This is usually done because of extra necessary customization, such as adding more detailed information about the resulting instance, or adding more starting features to it."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by bucket#8911"))),(0,o.kt)("p",null,"Constructor overloading is writing many constructors for a class, however with different signatures/parameters.\nFor example, these are the constructors of an imaginary class A."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public A(int store) { this.store = store; }\n\npublic A(String store) {\n      this.store = Integer.parseInt(store);\n}\n\nprivate A(String store, int integer) { ... }\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by Ruan Fernandes#3499"))),(0,o.kt)("p",null,"Constructor overloading, is having two or more constructors which can receive different data types, and different quantities of parameters."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by TheAwesomeGuy47#8156"))),(0,o.kt)("p",null,"Having multiple constructors in the same class"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by Maeve#7872"))),(0,o.kt)("p",null,"A constructor is a method to allocate memory for a class instance and initialize the classes attributes (that's probably why it's ",(0,o.kt)("inlineCode",{parentName:"p"},"def __init__()")," in python (the more you know)). If a class doesn't have a constructor, the Java compiler will use the default constructor and set the fields to ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),". Constructor overloading is very similar to method overloading. It is used to create objects in a different way and to initialize the member variables in a different way. There is no limit to the amount of overloaded constructors, as long as they have a different amount of args or different types of args."))}p.isMDXComponent=!0},7535:function(e,t,n){"use strict";t.Z=n.p+"assets/images/QOTW45-3f85fd92db89b9bfbf7a5f767e126d1b.png"}}]);