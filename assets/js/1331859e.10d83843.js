(self.webpackChunkjava_bot_docs=self.webpackChunkjava_bot_docs||[]).push([[817],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=a.createContext({}),l=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=l(t.components);return a.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),m=l(n),h=r,f=m["".concat(c,".").concat(h)]||m[h]||p[h]||o;return n?a.createElement(f,s(s({ref:e},u),{},{components:n})):a.createElement(f,s({ref:e},u))}));function h(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i.mdxType="string"==typeof t?t:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},21:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return p}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),s=["components"],i={id:"q41",title:"Week 41"},c={unversionedId:"qotw/weeks/q41",id:"qotw/weeks/q41",isDocsHomePage:!1,title:"Week 41",description:"29.08.2021 - 05.09.2021",source:"@site/docs/qotw/weeks/q41.md",sourceDirName:"qotw/weeks",slug:"/qotw/weeks/q41",permalink:"/qotw/weeks/q41",version:"current",frontMatter:{id:"q41",title:"Week 41"},sidebar:"tutorialSidebar",previous:{title:"Week 40",permalink:"/qotw/weeks/q40"},next:{title:"Commands",permalink:"/archived/commands"}},l=[],u={toc:l};function p(t){var e=t.components,i=(0,r.Z)(t,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"29082021---05092021"},"29.08.2021 - 05.09.2021"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(6897).Z})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by dan1st#7327"))),(0,o.kt)("p",null,"A constructor allows to specify what happens when creating objects of certain classes but constructors have certain limitations.\nConstructors always need to create a new object (except when throwing an exception, no object re-use or null return type etc allowed), always call the super constructor as first statement, cannot have names, cannot be used for getting objects of subclasses and multiple constructors with the same parameters are not possible."),(0,o.kt)("p",null,"An alternative for constructors is using factory method. A factory method is a method that takes care about the object creation instead of using a public constructor. The factory method may use a private constructor to instantiate the object and can also have a name, not return a new object every time, return subclasses etc."),(0,o.kt)("p",null,"A static factory method is the most simple type of a factory method. It is a factory method in the same class that is marked with ",(0,o.kt)("inlineCode",{parentName:"p"},"static"),". This allows to call it without providing an object beforehand (not requiring an object for object creation)."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by AttilaTheHun#9489"))),(0,o.kt)("p",null,"Finey, so ",(0,o.kt)("em",{parentName:"p"},"Static Factory Method")," is a method that generates objects for you, I am not sure how it works internally, logically it has to call the constructor either way if it wants to create an object but idk, I am not an @expert yet. However people wouldn't use it if it had not advantages \ud83d\ude0e"),(0,o.kt)("p",null,"PS. I got an idea why could it be useful, ",(0,o.kt)("del",{parentName:"p"},"but it's probably a stupid idea so I won't share"),". When you want to instantiate a private nested (static) class (if that's a thing), you can use this method as a sort of getter \ud83c\udf1f"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by Maeve#7872"))),(0,o.kt)("p",null,"A static factory method is a creational design pattern in which object creation is encapsulated. A class which uses this pattern to create an object has a private constructor, so that it can't be used to create an object. As the name of the pattern suggests, the factory method is static, so that it can be used without first having to create an object. There are some advantages of this pattern, for example, there can be multiple factory methods which accept the same parameter types, however, there can only be one constructor with a given signature."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Submission by gelbelachente#8017"))),(0,o.kt)("p",null,"A static Factory Method is basically a Method inside a class with a private Constructer, Managing the Creation of the Object based on input. And it needs to be static to be accessable from the othe classes."))}p.isMDXComponent=!0},6897:function(t,e,n){"use strict";e.Z=n.p+"assets/images/QOTW41-6c9cc7e1e0e6d66a35d0b1b5ff3952c4.png"}}]);